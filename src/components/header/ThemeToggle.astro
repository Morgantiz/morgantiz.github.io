---

---

<button id="theme-toggle" class="theme-toggle" aria-label="Toggle theme">
  <svg
    class="sun-icon"
    width="20"
    height="20"
    viewBox="0 0 24 24"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <circle cx="12" cy="12" r="5" stroke="currentColor" stroke-width="2"
    ></circle>
    <path
      d="M12 1v2m0 18v2M4.22 4.22l1.42 1.42m12.72 12.72l1.42 1.42M1 12h2m18 0h2M4.22 19.78l1.42-1.42M18.36 5.64l1.42-1.42"
      stroke="currentColor"
      stroke-width="2"></path>
  </svg>
  <svg
    class="moon-icon"
    width="20"
    height="20"
    viewBox="0 0 24 24"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"
      stroke="currentColor"
      stroke-width="2"></path>
  </svg>
</button>

<script>
  class ThemeToggle {
    constructor() {
      this.button = document.getElementById("theme-toggle");
      this.init();
    }

    init() {
      // Check for saved theme preference or default to light mode
      const savedTheme = localStorage.getItem("theme");
      const prefersDark = window.matchMedia(
        "(prefers-color-scheme: dark)",
      ).matches;

      if (savedTheme) {
        document.documentElement.setAttribute("data-theme", savedTheme);
      } else if (prefersDark) {
        document.documentElement.setAttribute("data-theme", "dark");
      } else {
        document.documentElement.setAttribute("data-theme", "light");
      }

      this.updateButtonState();
      this.button?.addEventListener("click", () => this.toggleTheme());
    }

    toggleTheme() {
      const currentTheme = document.documentElement.getAttribute("data-theme");
      const newTheme = currentTheme === "dark" ? "light" : "dark";

      document.documentElement.setAttribute("data-theme", newTheme);
      localStorage.setItem("theme", newTheme);
      this.updateButtonState();
    }

    updateButtonState() {
      const theme = document.documentElement.getAttribute("data-theme");
      const sunIcon = this.button?.querySelector(".sun-icon");
      const moonIcon = this.button?.querySelector(".moon-icon");

      if (theme === "dark") {
        sunIcon?.style.setProperty("display", "block");
        moonIcon?.style.setProperty("display", "none");
      } else {
        sunIcon?.style.setProperty("display", "none");
        moonIcon?.style.setProperty("display", "block");
      }
    }
  }

  // Initialize theme toggle when component loads
  document.addEventListener("DOMContentLoaded", () => {
    new ThemeToggle();
  });

  // Re-initialize if navigating with Astro's client-side routing
  document.addEventListener("astro:page-load", () => {
    new ThemeToggle();
  });
</script>

<style>
  .theme-toggle {
    position: fixed;
    top: 2%;
    right: 2%;
    z-index: 100;
    background: var(--middle);
    border: 2px solid var(--border-color);
    border-radius: 50%;
    min-width: 50px;
    min-height: 50px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
    backdrop-filter: blur(10px);
    box-shadow: 0 4px 20px var(--shadow-color);
  }

  /* Enlarges the icon when cursor on top */
  .theme-toggle:hover {
    transform: scale(1.1);
    box-shadow: 0 6px 25px var(--shadow-color);
  }

  .theme-toggle:active {
    transform: scale(0.95);
  }

  .sun-icon,
  .moon-icon {
    color: var(--text-primary);
    transition: all 0.3s ease;
  }

  .sun-icon {
    display: none;c
    
  }

  .moon-icon {
    display: block;
  }

  @media (max-width: 768px) {
    .theme-toggle {
      top: 1rem;
      right: 1rem;
      min-width: 45px;
      min-height: 45px;
    }
  }
</style>
